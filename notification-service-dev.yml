# Centralized configuration for notification-service in the 'dev' environment
# Configures the service for development with an H2 database and RabbitMQ.

spring:
  # Configures the connection to the RabbitMQ message broker.
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: ${SPRING_RABBITMQ_USERNAME} # Secrets are still injected from environment
    password: ${SPRING_RABBITMQ_PASSWORD}
  # Configures the connection to the development database.
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: sa
  # Configures JPA and Hibernate for development.
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update # Automatically creates/updates the database schema on startup.
    show-sql: true
  # Enables the H2 database web console for debugging.
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true # Allows access to the console from other machines.
  # Configures the JavaMailSender for sending emails.
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SPRING_MAIL_USERNAME} # Secret injected from environment
    password: ${SPRING_MAIL_PASSWORD} # Secret injected from environment
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
  # Configures Spring Cloud Stream for message-driven communication.
  cloud:
    function:
      # Defines the functions that are exposed as message consumers.
      definition: sendNotificationGeneric;sendNotification
    stream:
      # Binds the functions to specific RabbitMQ destinations (queues/topics).
      bindings:
        sendNotificationGeneric-in-0:
          destination: send-communication-generic
          group: ${spring.application.name}
        sendNotification-in-0:
          destination: send-communication
          group: ${spring.application.name}

eureka:
  # Configures how this service interacts with the Eureka discovery server.
  client:
    service-url:
      defaultZone: http://discovery-server:8761/eureka/
    enabled: true
    fetchRegistry: true
    registerWithEureka: true

management:
  # Configures actuator endpoints for monitoring and management.
  endpoints:
    web:
      exposure:
        include: "health,info,prometheus"
  endpoint:
    # Disables the remote shutdown endpoint, which is a critical security measure.
    shutdown:
      enabled: false
  metrics:
    # Adds the application name as a default tag to all metrics for better filtering.
    tags:
      application: ${spring.application.name}